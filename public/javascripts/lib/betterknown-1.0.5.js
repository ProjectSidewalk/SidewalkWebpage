(function(i,o){typeof exports=="object"&&typeof module<"u"?o(exports):typeof define=="function"&&define.amd?define(["exports"],o):(i=typeof globalThis<"u"?globalThis:i||self,o(i.betterknown={}))})(this,function(i){"use strict";var w=Object.defineProperty;var k=(i,o,a)=>o in i?w(i,o,{enumerable:!0,configurable:!0,writable:!0,value:a}):i[o]=a;var d=(i,o,a)=>(k(i,typeof o!="symbol"?o+"":o,a),a);const o=["Point","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon","GeometryCollection"],a=["ZM","Z","M"],u="EMPTY";class g{constructor(e){d(this,"value");d(this,"position");this.value=e.toUpperCase(),this.position=0}match(e){this.skipWhitespaces();for(const n of e){const r=n.toUpperCase();if(this.value.startsWith(r,this.position))return this.position+=r.length,n}return null}matchRegex(e){this.skipWhitespaces();for(const n of e){const r=this.value.substring(this.position).match(n);if(r)return this.position+=r[0].length,r}return null}isMatch(e){return this.skipWhitespaces(),this.value.startsWith(e,this.position)?(this.position+=e.length,!0):!1}matchType(){const e=this.match(o);if(!e)throw new Error("Expected geometry type");return e}matchDimension(){switch(this.match(a)){case"ZM":return{hasZ:!0,hasM:!0};case"Z":return{hasZ:!0,hasM:!1};case"M":return{hasZ:!1,hasM:!0};default:return{hasZ:!1,hasM:!1}}}expectGroupStart(){if(!this.isMatch("("))throw new Error("Expected group start")}expectGroupEnd(){if(!this.isMatch(")"))throw new Error("Expected group end")}matchCoordinate(e){let n;if(e.hasZ&&e.hasM?n=this.matchRegex([/^(\S*)\s+(\S*)\s+(\S*)\s+([^\s,)]*)/i]):e.hasZ||e.hasM?n=this.matchRegex([/^(\S*)\s+(\S*)\s+([^\s,)]*)/i]):n=this.matchRegex([/^(\S*)\s+([^\s,)]*)/i]),!n)throw new Error("Expected coordinates");const r=e.hasZ&&e.hasM?[parseFloat(n[1]),parseFloat(n[2]),parseFloat(n[3]),parseFloat(n[4])]:e.hasZ?[parseFloat(n[1]),parseFloat(n[2]),parseFloat(n[3])]:e.hasM?[parseFloat(n[1]),parseFloat(n[2])]:[parseFloat(n[1]),parseFloat(n[2])];if(e.srid&&e.srid!==4326){if(e.proj)return e.proj(`EPSG:${e.srid}`,"EPSG:4326",r);throw new Error(`EWKT data in an unknown SRID (${e.srid}) was provided, but a proj function was not`)}return r}matchCoordinates(e){const n=[];do{const r=this.isMatch("(");n.push(this.matchCoordinate(e)),r&&this.expectGroupEnd()}while(this.isMatch(","));return n}skipWhitespaces(){for(;this.position<this.value.length&&this.value[this.position]===" ";)this.position++}}const G=(t,e)=>{if(t.isMatch(u))return e.emptyAsNull?null:{type:"Point",coordinates:[]};t.expectGroupStart();const n=t.matchCoordinate(e);return t.expectGroupEnd(),{type:"Point",coordinates:n}},m=(t,e)=>{if(t.isMatch(u))return e.emptyAsNull?null:{type:"LineString",coordinates:[]};t.expectGroupStart();const n=t.matchCoordinates(e);return t.expectGroupEnd(),{type:"LineString",coordinates:n}},S=(t,e)=>{if(t.isMatch(u))return e.emptyAsNull?null:{type:"Polygon",coordinates:[]};const n=[];for(t.expectGroupStart(),t.expectGroupStart(),n.push(t.matchCoordinates(e)),t.expectGroupEnd();t.isMatch(",");)t.expectGroupStart(),n.push(t.matchCoordinates(e)),t.expectGroupEnd();return t.expectGroupEnd(),{type:"Polygon",coordinates:n}},E=(t,e)=>{if(t.isMatch(u))return e.emptyAsNull?null:{type:"MultiPoint",coordinates:[]};t.expectGroupStart();const n=t.matchCoordinates(e);return t.expectGroupEnd(),{type:"MultiPoint",coordinates:n}},y=(t,e)=>{if(t.isMatch(u))return e.emptyAsNull?null:{type:"MultiLineString",coordinates:[]};t.expectGroupStart();const n=[];do t.expectGroupStart(),n.push(t.matchCoordinates(e)),t.expectGroupEnd();while(t.isMatch(","));return t.expectGroupEnd(),{type:"MultiLineString",coordinates:n}},T=(t,e)=>{if(t.isMatch(u))return e.emptyAsNull?null:{type:"MultiPolygon",coordinates:[]};t.expectGroupStart();const n=[];do{t.expectGroupStart();const r=[],c=[];for(t.expectGroupStart(),r.push.apply(r,t.matchCoordinates(e)),t.expectGroupEnd();t.isMatch(",");)t.expectGroupStart(),c.push(t.matchCoordinates(e)),t.expectGroupEnd();n.push([r,...c]),t.expectGroupEnd()}while(t.isMatch(","));return t.expectGroupEnd(),{type:"MultiPolygon",coordinates:n}},P=(t,e)=>{if(t.isMatch(u))return e.emptyAsNull?null:{type:"GeometryCollection",geometries:[]};t.expectGroupStart();const n=[];do{const r=f(t,e);r&&n.push(r)}while(t.isMatch(","));return t.expectGroupEnd(),{type:"GeometryCollection",geometries:n}};function p(t){return t.join(" ")}function h(t){if(t===void 0)return" ";switch(t.length){case 3:return" Z ";default:return" "}}function x(t){return t.coordinates.length===0?"POINT EMPTY":`POINT${h(t.coordinates)}(${p(t.coordinates)})`}function L(t){return t.coordinates.length===0?"MULTIPOINT EMPTY":`MULTIPOINT${h(t.coordinates[0])}(${t.coordinates.map(e=>p(e)).join(",")})`}function N(t){if(t.coordinates.length===0)return"LINESTRING EMPTY";const e=`(${t.coordinates.map(n=>p(n)).join(",")})`;return`LINESTRING${h(t.coordinates[0])}${e}`}function C(t){return t.geometries.length===0?"GEOMETRYCOLLECTION EMPTY":`GEOMETRYCOLLECTION${`(${t.geometries.map(n=>M(n)).join(",")})`}`}function O(t){if(t.coordinates.length===0)return"MULTILINESTRING EMPTY";const e=`(${t.coordinates.map(n=>`(${n.map(r=>p(r))})`)})`;return`MULTILINESTRING${h(t.coordinates[0][0])}${e}`}function W(t){var n;if(t.coordinates.length===0)return"POLYGON EMPTY";const e=`(${t.coordinates.map(r=>`(${r.map(c=>p(c))})`)})`;return`POLYGON${h((n=t.coordinates[0])==null?void 0:n[0])}${e}`}function I(t){var n,r;if(t.coordinates.length===0)return"MULTIPOLYGON EMPTY";const e=`(${t.coordinates.map(c=>`(${c.map(l=>`(${l.map(s=>p(s))})`)})`)})`;return`MULTIPOLYGON${h((r=(n=t.coordinates[0])==null?void 0:n[0])==null?void 0:r[0])}${e}`}function f(t,e){let n=null;const r=t.matchRegex([/^SRID=(\d+);/i]);r&&(n=parseInt(r[1],10));const c=t.matchType(),l=t.matchDimension(),s={...e,srid:n,hasZ:l.hasZ,hasM:l.hasM};switch(c){case"Point":return G(t,s);case"LineString":return m(t,s);case"Polygon":return S(t,s);case"MultiPoint":return E(t,s);case"MultiLineString":return y(t,s);case"MultiPolygon":return T(t,s);case"GeometryCollection":return P(t,s)}}function M(t){switch(t.type){case"Point":return x(t);case"LineString":return N(t);case"MultiPoint":return L(t);case"GeometryCollection":return C(t);case"Polygon":return W(t);case"MultiPolygon":return I(t);case"MultiLineString":return O(t)}}function $(t,e={emptyAsNull:!0}){return f(new g(t),e)}i.geoJSONToWkt=M,i.wktToGeoJSON=$,Object.defineProperties(i,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
