(function(o,u){typeof exports=="object"&&typeof module<"u"?u(exports):typeof define=="function"&&define.amd?define(["exports"],u):(o=typeof globalThis<"u"?globalThis:o||self,u(o.betterknown={}))})(this,function(o){"use strict";const u=["POINT","LINESTRING","POLYGON","MULTIPOINT","MULTILINESTRING","MULTIPOLYGON","GEOMETRYCOLLECTION"],M=["ZM","Z","M"],c="EMPTY";class f{constructor(e){this.value=e,this.position=0}match(e){this.skipWhitespaces();for(const n of e)if(this.value.startsWith(n,this.position))return this.position+=n.length,n;return null}matchRegex(e){this.skipWhitespaces();for(const n of e){const r=this.value.substring(this.position).match(n);if(r)return this.position+=r[0].length,r}return null}isMatch(e){return this.skipWhitespaces(),this.value.startsWith(e,this.position)?(this.position+=e.length,!0):!1}matchType(){const e=this.match(u);if(!e)throw new Error("Expected geometry type");return e}matchDimension(){switch(this.match(M)){case"ZM":return{hasZ:!0,hasM:!0};case"Z":return{hasZ:!0,hasM:!1};case"M":return{hasZ:!1,hasM:!0};default:return{hasZ:!1,hasM:!1}}}expectGroupStart(){if(!this.isMatch("("))throw new Error("Expected group start")}expectGroupEnd(){if(!this.isMatch(")"))throw new Error("Expected group end")}matchCoordinate(e){let n;if(e.hasZ&&e.hasM?n=this.matchRegex([/^(\S*)\s+(\S*)\s+(\S*)\s+([^\s,)]*)/]):e.hasZ||e.hasM?n=this.matchRegex([/^(\S*)\s+(\S*)\s+([^\s,)]*)/]):n=this.matchRegex([/^(\S*)\s+([^\s,)]*)/]),!n)throw new Error("Expected coordinates");const r=e.hasZ&&e.hasM?[parseFloat(n[1]),parseFloat(n[2]),parseFloat(n[3]),parseFloat(n[4])]:e.hasZ?[parseFloat(n[1]),parseFloat(n[2]),parseFloat(n[3])]:e.hasM?[parseFloat(n[1]),parseFloat(n[2])]:[parseFloat(n[1]),parseFloat(n[2])];if(e.srid&&e.srid!==4326){if(e.proj)return e.proj(`EPSG:${e.srid}`,"EPSG:4326",r);throw new Error(`EWKT data in an unknown SRID (${e.srid}) was provided, but a proj function was not`)}return r}matchCoordinates(e){const n=[];do{const r=this.isMatch("(");n.push(this.matchCoordinate(e)),r&&this.expectGroupEnd()}while(this.isMatch(","));return n}skipWhitespaces(){for(;this.position<this.value.length&&this.value[this.position]===" ";)this.position++}}const T=(t,e)=>{if(t.isMatch(c))return e.emptyAsNull?null:{type:"Point",coordinates:[]};t.expectGroupStart();const n=t.matchCoordinate(e);return t.expectGroupEnd(),{type:"Point",coordinates:n}},G=(t,e)=>{if(t.isMatch(c))return e.emptyAsNull?null:{type:"LineString",coordinates:[]};t.expectGroupStart();const n=t.matchCoordinates(e);return t.expectGroupEnd(),{type:"LineString",coordinates:n}},E=(t,e)=>{if(t.isMatch(c))return e.emptyAsNull?null:{type:"Polygon",coordinates:[]};const n=[];for(t.expectGroupStart(),t.expectGroupStart(),n.push(t.matchCoordinates(e)),t.expectGroupEnd();t.isMatch(",");)t.expectGroupStart(),n.push(t.matchCoordinates(e)),t.expectGroupEnd();return t.expectGroupEnd(),{type:"Polygon",coordinates:n}},S=(t,e)=>{if(t.isMatch(c))return e.emptyAsNull?null:{type:"MultiPoint",coordinates:[]};t.expectGroupStart();const n=t.matchCoordinates(e);return t.expectGroupEnd(),{type:"MultiPoint",coordinates:n}},N=(t,e)=>{if(t.isMatch(c))return e.emptyAsNull?null:{type:"MultiLineString",coordinates:[]};t.expectGroupStart();const n=[];do t.expectGroupStart(),n.push(t.matchCoordinates(e)),t.expectGroupEnd();while(t.isMatch(","));return t.expectGroupEnd(),{type:"MultiLineString",coordinates:n}},m=(t,e)=>{if(t.isMatch(c))return e.emptyAsNull?null:{type:"MultiPolygon",coordinates:[]};t.expectGroupStart();const n=[];do{t.expectGroupStart();const r=[],s=[];for(t.expectGroupStart(),r.push.apply(r,t.matchCoordinates(e)),t.expectGroupEnd();t.isMatch(",");)t.expectGroupStart(),s.push(t.matchCoordinates(e)),t.expectGroupEnd();n.push([r,...s]),t.expectGroupEnd()}while(t.isMatch(","));return t.expectGroupEnd(),{type:"MultiPolygon",coordinates:n}},L=(t,e)=>{if(t.isMatch(c))return e.emptyAsNull?null:{type:"GeometryCollection",geometries:[]};t.expectGroupStart();const n=[];do{const r=d(t,e);r&&n.push(r)}while(t.isMatch(","));return t.expectGroupEnd(),{type:"GeometryCollection",geometries:n}};function a(t){return t.join(" ")}function h(t){if(t===void 0)return" ";switch(t.length){case 3:return" Z ";default:return" "}}function g(t){return t.coordinates.length===0?"POINT EMPTY":`POINT${h(t.coordinates)}(${a(t.coordinates)})`}function I(t){return t.coordinates.length===0?"MULTIPOINT EMPTY":`MULTIPOINT${h(t.coordinates[0])}(${t.coordinates.map(e=>a(e)).join(",")})`}function O(t){if(t.coordinates.length===0)return"LINESTRING EMPTY";const e=`(${t.coordinates.map(n=>a(n)).join(",")})`;return`LINESTRING${h(t.coordinates[0])}${e}`}function y(t){return t.geometries.length===0?"GEOMETRYCOLLECTION EMPTY":`GEOMETRYCOLLECTION${`(${t.geometries.map(n=>l(n)).join(",")})`}`}function P(t){if(t.coordinates.length===0)return"MULTILINESTRING EMPTY";const e=`(${t.coordinates.map(n=>`(${n.map(r=>a(r))})`)})`;return`MULTILINESTRING${h(t.coordinates[0][0])}${e}`}function x(t){var n;if(t.coordinates.length===0)return"POLYGON EMPTY";const e=`(${t.coordinates.map(r=>`(${r.map(s=>a(s))})`)})`;return`POLYGON${h((n=t.coordinates[0])==null?void 0:n[0])}${e}`}function C(t){var n,r;if(t.coordinates.length===0)return"MULTIPOLYGON EMPTY";const e=`(${t.coordinates.map(s=>`(${s.map(p=>`(${p.map(i=>a(i))})`)})`)})`;return`MULTIPOLYGON${h((r=(n=t.coordinates[0])==null?void 0:n[0])==null?void 0:r[0])}${e}`}function d(t,e){let n=null;const r=t.matchRegex([/^SRID=(\d+);/]);r&&(n=parseInt(r[1],10));const s=t.matchType(),p=t.matchDimension(),i={...e,srid:n,hasZ:p.hasZ,hasM:p.hasM};switch(s){case"POINT":return T(t,i);case"LINESTRING":return G(t,i);case"POLYGON":return E(t,i);case"MULTIPOINT":return S(t,i);case"MULTILINESTRING":return N(t,i);case"MULTIPOLYGON":return m(t,i);case"GEOMETRYCOLLECTION":return L(t,i)}}function l(t){switch(t.type){case"Point":return g(t);case"LineString":return O(t);case"MultiPoint":return I(t);case"GeometryCollection":return y(t);case"Polygon":return x(t);case"MultiPolygon":return C(t);case"MultiLineString":return P(t)}}function W(t,e={emptyAsNull:!0}){return d(new f(t),e)}o.geoJSONToWkt=l,o.wktToGeoJSON=W,Object.defineProperties(o,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
