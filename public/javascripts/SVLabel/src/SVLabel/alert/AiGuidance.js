/**
 * Module for displaying AI guidance messages to the user at the start of a task.
 *
 * @param tracker
 * @param popUpMessage
 * @returns {{className: string}}
 * @constructor
 */
function AiGuidance(tracker, popUpMessage) {
    var self = this;

    /**
     * Analyzes the current view of GSV using Gemini AI and returns guidance for the user.
     * @returns {Promise<null|AuthenticatorResponse|any>}
     * @private
     */
    async function _analyzeCanvasWithGemini() {
        try {
            // Capture the canvas screenshot.
            const canvas = $('.widget-scene-canvas')[0];
            const imageDataUrl = canvas.toDataURL('image/jpeg', 1);

            // Prepare the request payload.
            const payload = {
                image: imageDataUrl,
                way_type: svl.taskContainer.getCurrentTask().getProperty('wayType')
            };

            // Send request to the backend.
            const response = await fetch('/api/gemini/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            });

            const result = await response.json();

            if (result.success) {
                return result.response;
            } else {
                console.error('Analysis failed:', result.error);
                throw new Error(result.error);
            }

        } catch (error) {
            console.error('Error analyzing canvas:', error);
            throw error;
        }
    }

    /**
     * Displays a pop-up message with AI-generated guidance based on the current GSV view. Pilot in Chandigarh, India.
     */
    function showAiGuidanceMessage() {
        if (svl.cityId === 'chandigarh-india') {
            _analyzeCanvasWithGemini()
                .then(response => {
                    const title = 'Mission Guidance';
                    const body = `<span>${response}  <span title="This was generated by AI using the current image." style="cursor: pointer">&#9432;</span></span>`;

                    popUpMessage.notify(title, body, function () {
                        // Log the message shown to the user.
                        tracker.push('PopUpShow_AiGuidance', {message: response});
                    });
                })
                .catch(error => {
                    tracker.push('PopUpShow_AiGuidance_Error', {error: error.message});
                    console.error('Error showing AI guidance:', error);
                });
        }
    }


    self.showAiGuidanceMessage = showAiGuidanceMessage;
}
