package actor

import actor.ActorUtils.{dateFormatter, getTimeToNextUpdate}
import controllers.ClusterController
import org.apache.pekko.actor.{Actor, Cancellable, Props}
import play.api.Logger
import service.ConfigService

import java.time.Instant
import javax.inject._
import scala.concurrent.ExecutionContext
import scala.concurrent.duration._
import scala.util.{Failure, Success}

object ClusteringActor {
  val Name  = "clustering-actor"
  def props = Props[ClusteringActor]()
  case object Tick
}

@Singleton
class ClusteringActor @Inject() (clusterController: ClusterController)(implicit
    ec: ExecutionContext,
    configService: ConfigService
) extends Actor {

  private var cancellable: Option[Cancellable] = None
  private val logger                           = Logger(this.getClass)

  override def preStart(): Unit = {
    super.preStart()
    // Get the number of hours later to run the code in this city. Used to stagger computation/resource use.
    configService.getOffsetHours.foreach { hoursOffset =>
      // Target time is 4:00 am Pacific + offset.
      cancellable = Some(
        context.system.scheduler.scheduleAtFixedRate(
          getTimeToNextUpdate(4, 0, hoursOffset).toMillis.millis,
          24.hours,
          self,
          ClusteringActor.Tick
        )(context.dispatcher)
      )
      logger.info("ClusteringActor created")
    }
  }

  override def postStop(): Unit = {
    cancellable.foreach(_.cancel())
    cancellable = None
    super.postStop()
  }

  def receive: Receive = { case ClusteringActor.Tick =>
    val currentTimeStart: String = dateFormatter.format(Instant.now())
    // Skip clustering for Vancouver WA for now since all labels are AI-generated by one user, which breaks clustering.
    if (configService.getCityId == "vancouver-wa") {
      logger.info("Skipping clustering for Vancouver WA")
    } else {
      logger.info(s"Auto-scheduled clustering of labels starting at: $currentTimeStart")
      clusterController.runClusteringHelper().onComplete {
        case Success(results) =>
          val currentEndTime: String = dateFormatter.format(Instant.now())
          logger.info(s"Label clustering completed at: $currentEndTime")
          logger.info("Clustering results: " + results)
        case Failure(e) => logger.error(s"Error clustering labels: ${e.getMessage}")
      }
    }
  }
}
